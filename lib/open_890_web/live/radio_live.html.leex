<div id="radio" class="ui grid">
  <div class="row">
    <span id="" class="">
      <span>
        Theme:
        <a href="#" phx-click="set_theme" phx-value-theme="elecraft">Elecraft</a> |
        <a href="#" phx-click="set_theme" phx-value-theme="phosphor-green">Phosphor Green</a> |
        <a href="#" phx-click="set_theme" phx-value-theme="phosphor-red">Phosphor Red</a>
      </span>
    </span>
  </div>

  <div class="row">
    <div id="sMeterWrapper" class="column">
      <div class="ui grid">
        <div id="sMeterText"><%= s_meter_value_to_s_units(@s_meter) %></div>
        <svg id="sMeter" class="" viewbox="0 0 350 15">
          <%= for i <- (1..@s_meter) do %>
            <rect class="sMeter <%= if i >= 36, do: "high" %>" x="<%= i-1 + ((i-1) * 4) %>" width="3" height="15" />
          <% end %>
          <%= for i <- (@s_meter..70) do %>
            <rect class="sMeterBG" x="<%= i + (i * 4) %>" width="3" height="15" />
          <% end %>
        </svg>
      </div>
    </div>

    <div id="audioScopeWrapper" class="column">
      <div class="row">
        <span>lo/width: <%= @filter_lo_width %></span>
        <span>hi/shift: <%= @filter_hi_shift %></span>
      </div>

      <div class="row">
        <svg id="audioScope" class="scope themed <%= @theme %>" viewbox="0 0 212 50">
          <defs>
            <linearGradient id="kenwood" gradientTransform="rotate(90)">
              <stop offset="0" stop-color="white" />
              <stop offset="50" stop-color="#0c0c5c" />
            </linearGradient>
          </defs>
          <polygon id="audioSpectrum" class="spectrum" points="<%= scope_data_to_svg(@audio_scope_data, 60) %>" />
          <line id="audioScopeTuneIndicator" class="primaryCarrier" x1="106" y1="0" x2="106" y2="50" />
        </svg>
      </div>
    </div>
  </div>

  <!-- VFO indicator -->
  <div class="row">
    <div id="vfos" class="">
      <%= if @active_receiver == :a do %>
        <div class="freq active"><%= @active_frequency |> format_raw_frequency() %></div>
        <div class="bandIndicator">
          <div class="receiver">
            <span class="bandPointer">◀</span>
            <span class="receiverIndicator active">A</span>
            <span class="bandPointer"> </span>
          </div>
          <div>
            <span class="bandPointer"></span>
            <span class="receiverIndicator">B</span>
            <span class="bandPointer">▶</span>
          </div>
        </div>
        <div class="freq"><%= @inactive_frequency |> format_raw_frequency() %></div>
      <% else %>
        <div class="freq active"><%= @active_frequency |> format_raw_frequency() %></div>
        <div class="bandIndicator">
          <div class="receiver">
            <span class="bandPointer"></span>
            <span class="receiverIndicator">A</span>
            <span class="bandPointer">▶</span>
          </div>
          <div>
            <span class="bandPointer">◀</span>
            <span class="receiverIndicator active">B</span>
            <span class="bandPointer"> </span>
          </div>
        </div>
        <div class="freq"><%= @inactive_frequency |> format_raw_frequency() %></div>
      <% end %>
    </div>
  </div>

  <div class="row two column">
    <div class="column"><span><%= format_mode(@active_mode) %></span></div>
    <div class="column"><span><%= format_mode(@inactive_mode) %></span></div>
  </div>

  <div class="row">
    <div class="controlButtons">
      <button type="button" class="ui huge circular button radio-control multi-ch" phx-hook="MultiCH" id="multi-ch">Multi/CH</button>
      <%= if @active_receiver == :b do %>
        <%= cmd_button "A/B", "FR0", class: "huge" %>
      <% else  %>
        <%= cmd_button "A/B", "FR1", class: "huge" %>
      <% end %>
      <%= cmd_button "A=B", "VV", class: "huge" %>
    </div>
  </div>

  <%= live_render @socket, BandscopeLive, id: :bandscope, session: %{
    "theme" => @theme,
    "active_frequency" => @active_frequency,
    "active_mode" => @active_mode,
    "filter_lo_width" => @filter_lo_width,
    "filter_hi_shift" => @filter_hi_shift,
    "ssb_filter_mode" => @ssb_filter_mode,
    "ssb_data_filter_mode" => @ssb_data_filter_mode
  } %>

<%#= debug_assigns(assigns, except: [:audio_scope_data, :band_scope_data]) %>

</div>
