<%= if @connection_state != :up do %>
  <p>Radio connection not up.</p>
<% else %>
  <%= if @debug do %>
    <div id="debugger" class="ui wide sidebar vertical menu left visible">
      <h2 class="header item">Debug Vars</h3>

      <table class="ui small very basic collapsing table item">
        <tbody>
          <%= for k <- assigns |> Map.drop([:__changed__, :socket, :live_module, :live_action, :band_scope_data, :audio_scope_data]) |> Map.keys() |> Enum.sort() do %>
            <tr>
              <td class="right aligned"><span class="ui basic label"><%= k %></span></td>
              <td><span class="mono"><%= inspect(assigns[k]) %></span></td>
            </tr>
          <% end %>
        </tbody>
      </table>
    </div>
  <% end %>

  <div id="radio" class="ui stackable doubling grid">
    <%= if @display_screen_id != 0 do %>
      <div id="menuModal" class="ui active modal">
        <div class="header">
          <a href="#"><i class="close window icon" phx-click="close_menu"></i></a>
        </div>
        <div class="content">
          <h2 class="header">Menu #<%= @display_screen_id %></h3>
          <div class="ui vertical stackable attached fluid menu">
            <%= render_menu_items(@display_screen_id) %>
          </div>
        </div>
      </div>
    <% end %>

    <div class="ui inactive dimmer">
      <div id="utilityModal" class="ui inactive modal" style="">
        <div class="header">
          <h1>Band Selector</h1>
        </div>
        <div class="content">
          <div class="ui equal width grid stackable">
            <div class="row">
              <div class="column">
                <%= cmd_button "1.8", "BU000", class: "huge fluid" %>
              </div>
              <div class="column">
                <%= cmd_button "3.5", "BU001", class: "huge fluid" %>
              </div>
              <div class="column">
                <%= cmd_button "7", "BU002", class: "huge fluid" %>
              </div>
            </div>
            <div class="row">
              <div class="column">
                <%= cmd_button "10", "BU003", class: "huge fluid" %>
              </div>
              <div class="column">
                <%= cmd_button "14", "BU004", class: "huge fluid" %>
              </div>
              <div class="column">
                <%= cmd_button "18", "BU005", class: "huge fluid" %>
              </div>
            </div>
            <div class="row">
              <div class="column">
                <%= cmd_button "21", "BU006", class: "huge fluid" %>
              </div>
              <div class="column">
                <%= cmd_button "24", "BU007", class: "huge fluid" %>
              </div>
              <div class="column">
                <%= cmd_button "28", "BU008", class: "huge fluid" %>
              </div>
            </div>
            <div class="row">
              <div class="column">
                <%= cmd_button "50", "BU009", class: "huge fluid" %>
              </div>
              <div class="column">
              </div>
              <div class="column">
                <%= cmd_button "GEN", "BU010", class: "huge fluid" %>
              </div>
            </div>

          </div>

        </div>
      </div>
    </div>

    <div class="row">
      <div class="four wide column computer only tablet only">

        <div id="sMeterWrapper">
          <%= live_component @socket, Open890Web.Live.DigitalMeterComponent, %{
            s_meter: @s_meter,
            alc_meter: @alc_meter,
            swr_meter: @swr_meter
          } %>
        </div>

      </div> <!-- column containing smeterWrapper -->

      <div class="eight wide column center aligned">

        <!-- VFO indicator -->
        <div id="frequencyDisplay" class="ui row debug">
          <%= case @vfo_memory_state do %>
          <%= :vfo -> %>
            <div id="vfos" class="eight column row ">
              <%= live_component @socket, Open890Web.Live.VFODisplayComponent, %{
                active_receiver: @active_receiver,
                active_mode: @active_mode,
                inactive_mode: @inactive_mode,
                active_frequency: @active_frequency,
                inactive_frequency: @inactive_frequency,
                vfo_memory_state: @vfo_memory_state,
              } %>
            </div>
          <%= :memory -> %>
            <div id="memoryDisplay" class="eight column row debug">
              <div class="column">
                <p>Memory display not implemented yet.</p>
              </div>
            </div>
          <% _ -> %>
          <% end %>
        </div>

        <div class="row grid">
          <div class="column">
            <div class="">
              <%= if @vfo_memory_state == :vfo do %>
                <%= vfo_switch_button(@active_receiver, class: "ui small grey button") %>
                <%= vfo_equalize_button(class: "ui small grey button") %>
              <%= end %>

              <%= if @vfo_memory_state do %>
                <%= vfo_mem_switch_button(@vfo_memory_state, class: "ui small grey button") %>
              <% end %>
            </div>
          </div>
        </div>

        <div class="row debug">
          <p>stuff here</p>
        </div>

        <div class="row debug">
          <p>more stuff here</p>
        </div>

      </div>

      <div class="four wide right aligned column computer only tablet only ">

        <div id="audioScopeWrapper" class="hover-pointer">
          <svg id="audioScope" class="scope themed <%= @theme %>" viewbox="0 0 212 50" phx-hook="AudioScope">
            <defs>
              <linearGradient id="kenwood" gradientTransform="rotate(90)">
                <stop offset="0" stop-color="white" />
                <stop offset="50" stop-color="#0c0c5c" />
              </linearGradient>
            </defs>

            <text><%= @active_if_filter %></text>

            <polygon id="audioSpectrum" class="spectrum" points="<%= scope_data_to_svg(@audio_scope_data, 50) %>" vector-effect="non-scaling-stroke" />

            <%= if @active_if_filter && @roofing_filter_data[@active_if_filter] do %>
              <%= audio_scope_filter_edges(@active_mode, {@filter_lo_width, @filter_hi_shift}, @active_if_filter, @roofing_filter_data) %>
            <% end %>

            <line id="audioScopeTuneIndicator" class="primaryCarrier" x1="106" y1="5" x2="106" y2="50" />
          </svg>

          <canvas phx-hook="AudioScopeCanvas" id="AudioScopeCanvas" data-theme="<%= @theme %>" class="waterfall" width="213" height="50"></canvas>
        </div>

      </div> <!-- column containing audioScopeWrapper -->

    </div> <!-- row -->


    <div id="bandScopeDetails" class="row">
      <div class="column center aligned">
        <div class="scopeButtons">

          <%= if @band_scope_mode do %>
            <%= cycle_label_button("Scope Mode", @band_scope_mode,
              %{
                auto_scroll: %{label: "Auto Scroll", cmd: "BS30"},
                fixed: %{label: "Fixed", cmd: "BS32"},
                center: %{label: "Center", cmd: "BS31"}
              }, class: "black") %>
          <% end %>

          <%= if @band_scope_mode == :fixed do %>
            <button class="ui black button">Range: (fixme)</button>
          <% else %>
            <%= cycle_label_button("Span", @band_scope_span,
            %{
              5 => %{label: "5 kHz", cmd: "BS41"},
              10 => %{label: "10 kHz", cmd: "BS42"},
              20 =>  %{label: "20 kHz", cmd: "BS43"},
              30 =>  %{label: "30 kHz", cmd: "BS44"},
              50 =>  %{label: "50 kHz", cmd: "BS45"},
              100 => %{label: "100 kHz", cmd: "BS46"},
              200 => %{label: "200 kHz", cmd: "BS47"},
              500 => %{label: "500 kHz", cmd: "BS40"},
            }, class: "black") %>
          <% end %>

          <%= case @band_scope_mode do %>
            <%= :auto_scroll -> %>
              <%= cmd_button "Shift", "BSE", class: "ui black button" %>
            <% :fixed -> %>
              <%= cmd_button "MKR.CTR", "BSE", class: "ui black button" %>
            <% _ -> %>
              <%= "" %>
          <% end %>

          <div class="ui black button" id="RefLevelControl">
            <form class="" id="refLevel" phx-change="ref_level_changed">
              Ref Level
              <input id="refLevelInput" name="refLevel" type="number" min="-20" max="10" step="0.5" value="<%= format_ref_level(@ref_level) %>"></input>
              dB
            </form>
          </div>

          <%= if @band_scope_att do %>
            <%= cycle_label_button("Scope Att", @band_scope_att,
              %{
                0 => %{label: "Off", cmd: "BS81"},
                1 => %{label: "10 dB", cmd: "BS82"},
                2 => %{label: "20 dB", cmd: "BS83"},
                3 => %{label: "30 dB", cmd: "BS80"},
              }, class: "black") %>
          <% end %>

          <%= if @data_speed do %>
            <%= cycle_label_button("Speed", @data_speed,
              %{
                1 => %{label: "High", cmd: "DD03"},
                2 => %{label: "Mid", cmd: "DD01"},
                3 => %{label: "Low", cmd: "DD02"},
              }, class: "black") %>
          <% end %>

          <%= if @band_scope_avg do %>
            <%= cycle_label_button("Averaging", @band_scope_avg,
              %{
                0 => %{label: "Off", cmd: "BSA1"},
                1 => %{label: "1", cmd: "BSA2"},
                2 => %{label: "2", cmd: "BSA3"},
                3 => %{label: "3", cmd: "BSA0"},
              }, class: "black") %>
          <% end %>
        </div> <!-- ui buttons -->
      </div>
    </div>

    <div id="bandScopeContainer" class="row">
      <div class="wide column">

        <div id="bandScopeWrapper" class="hover-pointer">
          <svg id="bandScope" class="scope themed <%= @theme %>" viewbox="0 0 640 140">
            <defs>
              <filter id="blur" filterUnits="userSpaceOnUse" x="0" y="0" width="640" height="150">
                <feGaussianBlur in="sourceAlpha" stdDeviation="1" />
              </filter>
              <linearGradient id="kenwood" gradientUnits="userSpaceOnUse">
                <stop offset="0" stop-color="rgba(3, 3, 86, 1.0)" />
                <stop offset="1" stop-color="rgba(242, 242, 242, 1.0)" />
              </linearGradient>
            </defs>

            <%= if @band_scope_mode == :auto_scroll do %>
              <%= band_scope_vertical_grid() %>
            <% end %>

            <%= band_scope_horizontal_grid() %>

            <polygon id="spectrumBlur" filter="url(#blur)" points="<%= scope_data_to_svg(@band_scope_data, 150) %>" />
            <polygon id="bandSpectrum" class="spectrum" points="<%= scope_data_to_svg(@band_scope_data, 150) %>" vector-effect="non-scaling-stroke" />

            <%= if @band_scope_edges do %>
              <g transform="translate(0 12)">
                <text class="bandEdge low" x="5" y="0"><%= @band_scope_edges |> format_band_scope_low() %></text>
                <text class="bandEdge high" x="635" y="0"><%= @band_scope_edges |> format_band_scope_high() %></text>
              </g>
            <% end %>

            <%= if @band_scope_mode == :center do %>
              <%= center_carrier_line() %>
            <% else %>
              <%= if @band_scope_edges && @filter_hi_shift && @filter_lo_width do %>
                <%= passband_polygon(@active_mode, @active_frequency, @filter_lo_width, @filter_hi_shift, @band_scope_edges) %>
                <%= carrier_line(@active_frequency, @band_scope_edges) %>
              <% end %>
            <% end %>

            <rect id="bandscopeBackground" x="0" y="0" height="150" width="1280" pointer-events="visibleFill" phx-hook="BandScope" />
          </svg>

          <canvas phx-hook="BandScopeCanvas" id="BandScopeCanvas" data-theme="<%= @theme %>" class="waterfall bandscope" width="1280" height="300"></canvas>
        </div>



      </div>
  </div>

<% end %>
